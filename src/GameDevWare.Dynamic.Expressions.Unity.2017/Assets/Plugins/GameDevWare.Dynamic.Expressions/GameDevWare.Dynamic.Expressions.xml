<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameDevWare.Dynamic.Expressions</name>
    </assembly>
    <members>
        <member name="T:GameDevWare.Dynamic.Expressions.AotCompilation">
            <summary>
            Helper class for Ahead-of-Time(AOT) compiled environments.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.AotCompilation.IsAotRuntime">
            <summary>
            Is current runtime is AOT compiled.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterForFastCall``5">
            <summary>
            Prepares method with specified signature for fast execution in AOT compiled environment.
            </summary>
            <typeparam name="InstanceT">Type of instance which method belongs.</typeparam>
            <typeparam name="Arg1T">Method's first argument type.</typeparam>
            <typeparam name="Arg2T">Method's second argument type.</typeparam>
            <typeparam name="Arg3T">Method's third argument type.</typeparam>
            <typeparam name="ResultT">Method's return type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterForFastCall``4">
            <summary>
            Prepares method with specified signature for fast execution in AOT compiled environment.
            </summary>
            <typeparam name="InstanceT">Type of instance which method belongs.</typeparam>
            <typeparam name="Arg1T">Method's first argument type.</typeparam>
            <typeparam name="Arg2T">Method's second argument type.</typeparam>
            <typeparam name="ResultT">Method's return type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterForFastCall``3">
            <summary>
            Prepares method with specified signature for fast execution in AOT compiled environment.
            </summary>
            <typeparam name="InstanceT">Type of instance which method belongs.</typeparam>
            <typeparam name="Arg1T">Method's first argument type.</typeparam>
            <typeparam name="ResultT">Method's return type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterForFastCall``2">
            <summary>
            Prepares method with specified signature for fast execution in AOT compiled environment.
            </summary>
            <typeparam name="InstanceT">Type of instance which method belongs.</typeparam>
            <typeparam name="ResultT">Method's return type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterFunc``5">
            <summary>
            Prepares function <see cref="T:System.Func`5"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
            <typeparam name="Arg3T">Function's third argument.</typeparam>
            <typeparam name="Arg4T">Function's fourth argument.</typeparam>
            <typeparam name="ResultT">Function result type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterFunc``4">
            <summary>
            Prepares function <see cref="T:System.Func`4"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
            <typeparam name="Arg3T">Function's third argument.</typeparam>
            <typeparam name="ResultT">Function result type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterFunc``3">
            <summary>
            Prepares function <see cref="T:System.Func`3"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
            <typeparam name="ResultT">Function result type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterFunc``2">
            <summary>
            Prepares function <see cref="T:System.Func`2"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="ResultT">Function result type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterFunc``1">
            <summary>
            Prepares function <see cref="T:System.Func`1"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="ResultT">Function result type.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterAction``4">
            <summary>
            Prepares function <see cref="T:System.Func`5"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
            <typeparam name="Arg3T">Function's third argument.</typeparam>
            <typeparam name="Arg4T">Function's fourth argument.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterAction``3">
            <summary>
            Prepares function <see cref="T:System.Func`4"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
            <typeparam name="Arg3T">Function's third argument.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterAction``2">
            <summary>
            Prepares function <see cref="T:System.Func`3"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
            <typeparam name="Arg2T">Function's second argument.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterAction``1">
            <summary>
            Prepares function <see cref="T:System.Func`2"/> with specified signature for execution in AOT compiled environment.
            </summary>
            <typeparam name="Arg1T">Function's first argument.</typeparam>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AotCompilation.RegisterAction">
            <summary>
            Prepares function <see cref="T:System.Func`1"/> with specified signature for execution in AOT compiled environment.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.ArgumentsTree">
            <summary>
            List of expression's arguments by name or position. This collection is read-only.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.ArgumentsTree.Empty">
            <summary>
            Empty arguments list
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.#ctor">
            <summary>
            Creates empty list of arguments.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.#ctor(System.Collections.Generic.Dictionary{System.String,GameDevWare.Dynamic.Expressions.SyntaxTreeNode})">
            <summary>
            Create list of arguments from existing dictionary.
            </summary>
            <param name="innerDictionary"></param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.ContainsKey(System.String)">
            <summary>
            Check if passes named argument is exists in list.
            </summary>
            <returns>true is exists, overwise false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.ContainsKey(System.Int32)">
            <summary>
            Check if passes positional argument is exists in list.
            </summary>
            <returns>true is exists, overwise false.</returns>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ArgumentsTree.Keys">
            <summary>
            Returns list of arguments names/positions.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.TryGetValue(System.String,GameDevWare.Dynamic.Expressions.SyntaxTreeNode@)">
            <summary>
            Tries to retrieve argument by its name.
            </summary>
            <returns>true is exists, overwise false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.TryGetValue(System.Int32,GameDevWare.Dynamic.Expressions.SyntaxTreeNode@)">
            <summary>
            Tries to retrieve argument by its position.
            </summary>
            <returns>true is exists, overwise false.</returns>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ArgumentsTree.Values">
            <summary>
            Returns all arguments in this list.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ArgumentsTree.Item(System.String)">
            <summary>
            Returns argument by its name.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ArgumentsTree.Item(System.Int32)">
            <summary>
            Returns argument by its position.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ArgumentsTree.Count">
            <summary>
            Returns number of arguments in list.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.Equals(System.Object)">
            <summary>
            Compares two arguments list by reference.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.GetHashCode">
            <summary>
            Returns hash code of arguments list.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ArgumentsTree.ToString">
            <summary>
            Converts argument list to string.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver">
            <summary>
            <see cref="T:GameDevWare.Dynamic.Expressions.ITypeResolver"/> which allows any public (<see cref="P:System.Type.IsPublic"/>) type from specified <see cref="T:System.Reflection.Assembly"/>(or multiple <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver.#ctor(System.Reflection.Assembly[])">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver"/> from list of assemblies.
            </summary>
            <param name="assemblies">List of assemblies to add as source of known types.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver"/> from list of assemblies.
            </summary>
            <param name="assemblies">List of assemblies to add as source of known types.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.AssemblyTypeResolver"/> from list of assemblies.
            </summary>
            <param name="otherTypeResolver">Backup type resolver used if current can't find a type.</param>
            <param name="assemblies">List of assemblies to add as source of known types.</param>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.Binder">
            <summary>
            Binder which is used for binding syntax tree concrete types and members.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver">
            <summary>
            Default type resolver which is used if none is specified.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Binder.Parameters">
            <summary>
            List of parameters for bound expression.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Binder.ResultType">
            <summary>
            Result type of bound expression.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Binder.#ctor(System.Type,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Creates new binder for expressions with <paramref name="lambdaType"/> signature. Optionally specifying <paramref name="typeResolver"/> to reference additional types during binding.
            </summary>
            <param name="lambdaType">Signature of bound expression.</param>
            <param name="typeResolver">Type resolver used for type resolution during binding process.
            When not specified then new instance of <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> is created using <paramref name="lambdaType"/> parameter types and result type.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Binder.#ctor(System.Collections.Generic.IList{System.Linq.Expressions.ParameterExpression},System.Type,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Creates new binder for expressions with signature contains <paramref name="parameters"/>(up to 4) and <paramref name="resultType"/>. Optionally specifying <paramref name="typeResolver"/> to reference additional types during binding.
            </summary>
            <param name="parameters">List of parameter for bound expression. Maximum number of parameters is 4.</param>
            <param name="resultType">Result type of bound expression.</param>
            <param name="typeResolver">Type resolver used for type resolution during binding process.
            When not specified then new instance of <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> is created using <paramref name="parameters"/> parameter types and result type.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Binder.Bind(GameDevWare.Dynamic.Expressions.SyntaxTreeNode,System.Linq.Expressions.Expression)">
            <summary>
            Binds specified syntax tree to concrete types and optional context.
            </summary>
            <param name="node">Syntax tree. Not null.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Binder.ToString">
            <inheritdoc />
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression">
            <summary>
            Helpers method for C# expression parsing and evaluation.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.DEFAULT_CHECKED_SCOPE">
            <summary>
            Default value of "checked scope" parameter for <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``1(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> and <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``1(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> methods.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME">
            <summary>
            Default name of first argument for <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``2(System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> and <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``2(System.String,``0,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> methods.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME">
            <summary>
            Default name of second argument for <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``3(System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> and <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``3(System.String,``0,``1,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> methods.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME">
            <summary>
            Default name of third argument for <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``4(System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> and <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``4(System.String,``0,``1,``2,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> methods.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME">
            <summary>
            Default name of fourth argument for <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``5(System.String,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> and <see cref="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``5(System.String,``0,``1,``2,``3,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)"/> methods.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``1(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Evaluate specified C# expression and return result.
            </summary>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``2(System.String,``0,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Evaluate specified C# expression and return result.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``3(System.String,``0,``1,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Evaluate specified C# expression and return result.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``4(System.String,``0,``1,``2,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Evaluate specified C# expression and return result.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg3">Third argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Evaluate``5(System.String,``0,``1,``2,``3,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Evaluate specified C# expression and return result.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg3">Third argument value.</param>
            <param name="arg4">Fourth argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Execute(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Executes specified C# expression.
            </summary>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Execute``1(System.String,``0,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Executes specified C# expression.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Execute``2(System.String,``0,``1,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Executes specified C# expression.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Execute``3(System.String,``0,``1,``2,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Executes specified C# expression.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg3">Third argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Execute``4(System.String,``0,``1,``2,``3,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Executes specified C# expression.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1">First argument value.</param>
            <param name="arg2">Second argument value.</param>
            <param name="arg3">Third argument value.</param>
            <param name="arg4">Fourth argument value.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>Evaluated value.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Parse``1(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Parse``2(System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Parse``3(System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Parse``4(System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Parse``5(System.String,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``1(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``2(System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``3(System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``4(System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseFunc``5(System.String,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseAction(System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseAction``1(System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseAction``2(System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseAction``3(System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ParseAction``4(System.String,System.String,System.String,System.String,System.String,GameDevWare.Dynamic.Expressions.ITypeResolver,System.Linq.Expressions.Expression)">
            <summary>
            Parses specified C# expression and returns <see cref="T:System.Linq.Expressions.Expression`1"/> which could be compiled with <see cref="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)"/> and executed.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <param name="expression">A valid c# expression. Not null, not empty string.</param>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <param name="typeResolver">Type resolver for C# expression. Or <seealso cref="F:GameDevWare.Dynamic.Expressions.Binder.DefaultTypeResolver"/> if not specified.</param>
            <param name="global">Global object expression. Can be null. Usually <see cref="M:System.Linq.Expressions.Expression.Constant(System.Object)"/>.</param>
            <returns>A parsed and bound syntax tree.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Format(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Formats <see cref="T:System.Linq.Expressions.Expression"/> into string representation.
            </summary>
            <param name="expression">An valid expression.</param>
            <param name="checkedScope">True to assume all arithmetic and conversion operation is checked for overflows.</param>
            <returns>C# formatted expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.Format(GameDevWare.Dynamic.Expressions.SyntaxTreeNode,System.Boolean)">
            <summary>
            Formats <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/> into string representation.
            </summary>
            <param name="syntaxTree">An valid syntax tree.</param>
            <param name="checkedScope">True to assume all arithmetic and conversion operation is checked for overflows.</param>
            <returns>C# formatted expression.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpressionFormatter">
            <summary>
            Type extension class for <see cref="T:System.Linq.Expressions.Expression"/>. Add expression formatting methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpressionFormatter.Render(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Renders syntax tree into string representation.
            </summary>
            <param name="expression">Syntax tree.</param>
            <param name="checkedScope">True to assume all arithmetic and conversion operation is checked for overflows. Overwise false.</param>
            <returns>Rendered expression.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.CSharpSyntaxTreeFormatter">
            <summary>
            Type extension class for <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/>. Add expression formatting methods for <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/>.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.CSharpSyntaxTreeFormatter.Render(GameDevWare.Dynamic.Expressions.SyntaxTreeNode,System.Boolean)">
            <summary>
            Renders syntax tree into string representation.
            </summary>
            <param name="syntaxTree">Syntax tree.</param>
            <param name="checkedScope">True to assume all arithmetic and conversion operation is checked for overflows. Overwise false.</param>
            <returns>Rendered expression.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.Parser">
            <summary>
            Expression parser. Converts stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/> to parser tree(<see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/>).
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.Parser.Parse(System.Collections.Generic.IEnumerable{GameDevWare.Dynamic.Expressions.CSharp.Token})">
            <summary>
            Converts stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/> to parser tree(<see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/>).
            </summary>
            <param name="tokens">Stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/>.</param>
            <returns>A parser tree(<see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/></returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode">
            <summary>
            Parse tree node.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.Type">
            <summary>
            Type of current node.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.Token">
            <summary>
            Lexeme from which current node is originated.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.Value">
            <summary>
            Value of current node.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.Item(System.Int32)">
            <summary>
            Get child node by index.
            </summary>
            <param name="index">Index of child node.</param>
            <returns>Child node at index.</returns>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.Count">
            <summary>
            Returns number of child nodes.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode.ToString">
            <summary>
            Converts parse tree to string for debugging.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.SyntaxTreeBuilder">
            <summary>
            Helper class allowing conversion from <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/> to <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/>.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.SyntaxTreeBuilder.ToSyntaxTree(GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode,System.Boolean,System.String)">
            <summary>
            Convert <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/> to <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/> which is bindable on <see cref="T:System.Linq.Expressions.Expression"/> tree.
            </summary>
            <param name="parseNode">Parse tree node.</param>
            <param name="checkedScope">Numeric operation scope. Checked mean - no number overflow is allowed. Unchecked mean - overflow is allowed.</param>
            <param name="cSharpExpression">Original C# expression from which this AST was build.</param>
            <returns>Prepared <see cref="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode"/> representing <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.ParseTreeNode"/>.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.Token">
            <summary>
            Tokenizer's token data.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.Token.Type">
            <summary>
            Type of token.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.Token.Value">
            <summary>
            Value of token.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.Token.LineNumber">
            <summary>
            Line number of token (position).
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.Token.ColumnNumber">
            <summary>
            Column number of token (position).
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.CSharp.Token.TokenLength">
            <summary>
            Length of token (position).
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.CSharp.Token.IsValid">
            <summary>
            Returns true if token is valid.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.CSharp.Token.Position">
            <summary>
            Returns token's position as string.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.Token.#ctor(GameDevWare.Dynamic.Expressions.CSharp.TokenType,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new token.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.Token.ToString">
            <summary>
            Converts token to string for debugging.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.Tokenizer">
            <summary>
            Expression string tokenizer. Produces stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/> from expression <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.CSharp.Tokenizer.Tokenize(System.String)">
            <summary>
            Produces stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/> from <paramref name="expression"/>.
            </summary>
            <param name="expression">A valid expression string.</param>
            <returns>Stream of <see cref="T:GameDevWare.Dynamic.Expressions.CSharp.Token"/>.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.CSharp.TokenType">
            <summary>
            Types of tokens
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ArrayIndexNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ArrayIndexNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ArrayLengthNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ArrayLengthNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.BinaryNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.BinaryNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.CallNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.CallNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.CoalesceNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.CoalesceNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConditionalNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConditionalNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConstantNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConstantNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConvertNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ConvertNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.InvocationNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.InvocationNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.LambdaNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.LambdaNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ListInitNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ListInitNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.LocalNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.LocalNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberAccessNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberAccessNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberAssignmentsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberAssignmentsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberInitNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberInitNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberListBindingsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberListBindingsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberMemberBindingsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.MemberMemberBindingsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewArrayBoundsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewArrayBoundsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewArrayInitNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewArrayInitNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NewNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NullNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.NullNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ParameterNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.ParameterNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.QuoteNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.QuoteNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.TypeAsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.TypeAsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.TypeIsNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.TypeIsNode.ToString">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.UnaryNode.Run(GameDevWare.Dynamic.Expressions.Execution.Closure)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.Execution.UnaryNode.ToString">
            <inheritdoc />
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.ExpressionKnownTypeAttribute">
            <summary>
            Marker for <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> to discover additional types with specified type (on which attribute is placed).
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ExpressionKnownTypeAttribute.Type">
            <summary>
            Additional type to discover.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionKnownTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.ExpressionKnownTypeAttribute"/> with specified type.
            </summary>
            <param name="type">Additional type to discover. Not null. </param>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.ExpressionParserException">
            <summary>
            Expression parsing exception.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ExpressionParserException.LineNumber">
            <summary>
            Line number related to exception.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ExpressionParserException.ColumnNumber">
            <summary>
            Column number related to exception.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.ExpressionParserException.TokenLength">
            <summary>
            Length of token related to exception.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Return data for binary serialization.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionParserException.ToString">
            <summary>
            Converts exception to string representation for debug purpose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionPosition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionPosition.Equals(GameDevWare.Dynamic.Expressions.ExpressionPosition)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionPosition.Equals(GameDevWare.Dynamic.Expressions.ILineInfo)">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionPosition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionPosition.ToString">
            <inheritdoc />
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.ExpressionVisitor">
            <summary>
            Represents a visitor or rewriter for expression trees.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Dispatches the expression to one of the more specialized visit methods in this class.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.ITypeResolver">
            <summary>
            Interface for type resolution services.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ITypeResolver.TryGetType(GameDevWare.Dynamic.Expressions.TypeReference,System.Type@)">
            <summary>
            Tries to retrieve type by it's name and generic parameters.
            </summary>
            <param name="typeReference">Type name. Not null. Not <see cref="F:GameDevWare.Dynamic.Expressions.TypeReference.Empty"/></param>
            <param name="foundType">Found type or null.</param>
            <returns>True if type is found. Overwise is false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.ITypeResolver.IsKnownType(System.Type)">
            <summary>
            Checks if specified type is known by current type resolver;
            </summary>
            <param name="type">Type to lookup. Not null.</param>
            <returns>True if type is known by this resolver. Overwise false.</returns>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver">
            <summary>
            <see cref="T:GameDevWare.Dynamic.Expressions.ITypeResolver"/> which allows access to specified number of types.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.KnownTypeResolver.Default">
            <summary>
            Default instance of <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> which knows about <see cref="T:System.Math"/>, <see cref="T:System.Array"/> and primitive types.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.#ctor(System.Type[])">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> from specified list of types and <see cref="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.All"/>.
            </summary>
            <param name="knownTypes">List of known types.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> from specified list of types and <see cref="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.All"/>.
            </summary>
            <param name="knownTypes">List of known types.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},GameDevWare.Dynamic.Expressions.ITypeResolver)">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> from specified list of types and <see cref="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.All"/>.
            </summary>
            <param name="knownTypes">List of known types.</param>
            <param name="otherTypeResolver">Backup type resolver used if current can't find a type.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},GameDevWare.Dynamic.Expressions.ITypeResolver,GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions)">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.KnownTypeResolver"/> from specified list of types and specified <see cref="T:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions"/>.
            </summary>
            <param name="knownTypes">List of known types.</param>
            <param name="otherTypeResolver">Backup type resolver used if current can't find a type.</param>
            <param name="options">Types discovery options.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.TryGetType(GameDevWare.Dynamic.Expressions.TypeReference,System.Type@)">
            <summary>
            Tries to retrieve type by it's name and generic parameters.
            </summary>
            <param name="typeReference">Type name. Not null. Not <see cref="F:GameDevWare.Dynamic.Expressions.TypeReference.Empty"/></param>
            <param name="foundType">Found type or null.</param>
            <returns>True if type is found. Overwise is false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.IsKnownType(System.Type)">
            <summary>
            Checks if specified type is known by current type resolver;
            </summary>
            <param name="type">Type to lookup. Not null.</param>
            <returns>True if type is known by this resolver. Overwise false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.KnownTypeResolver.ToString">
            <summary>
            Converts type resolver to string for debug purpose.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.SyntaxTreeNode">
            <summary>
            Abstract syntax tree of expression
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates new syntax tree from existing dictionary.
            </summary>
            <param name="node">Dictionary containing a valid syntax tree.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.GetValueOrDefault``1(System.String,``0)">
            <summary>
            Tries to retrieve contained node by its name and covert it to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of expected value.</typeparam>
            <param name="key">Node name.</param>
            <param name="defaultValue">Default value node node with <paramref name="key"/> doesn't exists or value can't be casted to <typeparamref name="T"/>.</param>
            <returns>True is node exists and value successfully casted to <typeparamref name="T"/>, overwise false.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.ContainsKey(System.String)">
            <summary>
            Check if syntax tree contain node with specified <paramref name="key"/>.
            </summary>
            <param name="key">Name of contained node. Can't be null.</param>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.Keys">
            <summary>
            Returns collection of names of contained nodes.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to retrieve node of syntax tree by its name.
            </summary>
            <returns>True is node exists, overwise false.</returns>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.Values">
            <summary>
            Returns collection of contained nodes.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.Item(System.String)">
            <summary>
            Returns contained node by its name;
            </summary>
            <param name="key">Name of contained node. Can't be null.</param>
            <returns></returns>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.Count">
            <summary>
            Returns count of contained nodes.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.Equals(System.Object)">
            <summary>
            Compares two syntax tree by reference.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.GetHashCode">
            <summary>
            Get hash code of syntax tree.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.ToCSharpExpression">
            <summary>
            Format syntax tree as a C# expression. Throw exceptions if exception could not be formed.
            </summary>
            <returns>C# Expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.SyntaxTreeNode.ToString">
            <summary>
            Format syntax tree as C# expression.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions">
            <summary>
            Options of type discovery on specified types.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.Default">
            <summary>
            Only specified types is known.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.Interfaces">
            <summary>
            All interfaces on specified types are known.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.GenericArguments">
            <summary>
            All generic arguments on specified types are known.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.KnownTypes">
            <summary>
            All types from <see cref="T:GameDevWare.Dynamic.Expressions.ExpressionKnownTypeAttribute"/> on specified types are known.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.DeclaringTypes">
            <summary>
            All <see cref="P:System.Type.DeclaringType"/>(recursively) on specified types are known.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeDiscoveryOptions.All">
            <summary>
            All discovery options are active.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.TypeReference">
            <summary>
            Type reference with type arguments.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeReference.Empty">
            <summary>
            Empty type reference. Used for open generic types as parameter placeholder.
            </summary>
        </member>
        <member name="F:GameDevWare.Dynamic.Expressions.TypeReference.EmptyTypeArguments">
            <summary>
            Empty list of type arguments.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.TypeReference.FullName">
            <summary>
            Full type name with namespace and declared types.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.TypeReference.Name">
            <summary>
            Type's name without namespace and declared types.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.TypeReference.Namespace">
            <summary>
            Types' namespace if any.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.TypeReference.TypeArguments">
            <summary>
            Type's generic arguments.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.TypeReference.IsGenericType">
            <summary>
            Returns true if type has type arguments.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{GameDevWare.Dynamic.Expressions.TypeReference})">
            <summary>
            Creates new type reference from type's path and type's generic arguments.
            </summary>
            <param name="typeName">Type path.</param>
            <param name="typeArguments">Type generic arguments.</param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.Equals(System.Object)">
            <summary>
            Compares two type references by value.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.Equals(GameDevWare.Dynamic.Expressions.TypeReference)">
            <summary>
            Compares two type references by value.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.GetHashCode">
            <summary>
            Return hash code of type reference.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.op_Equality(GameDevWare.Dynamic.Expressions.TypeReference,GameDevWare.Dynamic.Expressions.TypeReference)">
            <summary>
            Checks if two type references are equals.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.op_Inequality(GameDevWare.Dynamic.Expressions.TypeReference,GameDevWare.Dynamic.Expressions.TypeReference)">
            <summary>
            Checks if two type references are not equals.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.TypeReference.ToString">
            <summary>
            Converts type reference to string representation for debug purpose.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.UnboundExpression">
            <summary>
            Abstract expression tree which is not bound to concrete types. Could be bound with <see cref="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``1"/> methods.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.UnboundExpression.SyntaxTree">
            <summary>
            Syntax tree of this expression.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates new <see cref="T:GameDevWare.Dynamic.Expressions.UnboundExpression"/> from syntax tree.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``1">
            <summary>
            Binds expression to concrete types and compiles it afterward.
            </summary>
            <typeparam name="ResultT">Result type.</typeparam>
            <returns>Bound and compiled into <see cref="T:System.Func`1"/> expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``2(System.String)">
            <summary>
            Binds expression to concrete types and compiles it afterward.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <returns>Bound and compiled into <see cref="T:System.Func`2"/> expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``3(System.String,System.String)">
            <summary>
            Binds expression to concrete types and compiles it afterward.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <returns>Bound and compiled into <see cref="T:System.Func`3"/> expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``4(System.String,System.String,System.String)">
            <summary>
            Binds expression to concrete types and compiles it afterward.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <returns>Bound and compiled into <see cref="T:System.Func`4"/> expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Bind``5(System.String,System.String,System.String,System.String)">
            <summary>
            Binds expression to concrete types and compiles it afterward.
            </summary>
            <typeparam name="Arg1T">First argument type.</typeparam>
            <typeparam name="Arg2T">Second argument type.</typeparam>
            <typeparam name="Arg3T">Third argument type.</typeparam>
            <typeparam name="Arg4T">Fourth argument type.</typeparam>
            <typeparam name="ResultT">Result type.</typeparam>
            <param name="arg1Name">First argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG1_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg2Name">Second argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG2_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg3Name">Third argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG3_DEFAULT_NAME"/> if not specified.</param>
            <param name="arg4Name">Fourth argument name or <see cref="F:GameDevWare.Dynamic.Expressions.CSharp.CSharpExpression.ARG4_DEFAULT_NAME"/> if not specified.</param>
            <returns>Bound and compiled into <see cref="T:System.Func`5"/> expression.</returns>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.Equals(System.Object)">
            <summary>
            Compares to another unbound expression by reference.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.GetHashCode">
            <summary>
            Returns hash code of unbound expression.
            </summary>
        </member>
        <member name="M:GameDevWare.Dynamic.Expressions.UnboundExpression.ToString">
            <summary>
            Converts unbound expression to string representation for debug purpose.
            </summary>
        </member>
        <member name="T:GameDevWare.Dynamic.Expressions.Properties.Resources">
            <summary>
            Localization resource for current assembly
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.SupportedLanguages">
            <summary>
            List of supported localization languages. <seealso cref="P:GameDevWare.Dynamic.Expressions.Properties.Resources.CurrentLanguage"/>.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.CurrentLanguage">
            <summary>
            Current selected language of localization.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.All">
            <summary>
            Return all localization strings by current <see cref="P:GameDevWare.Dynamic.Expressions.Properties.Resources.CurrentLanguage"/>.
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDINDEXER">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDINDEXER
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_VALIDDELEGATETYPEISEXPECTED">
            <summary>
            Localization string with key EXCEPTION_BIND_VALIDDELEGATETYPEISEXPECTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_INVALIDLAMBDAPARAMETERTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_INVALIDLAMBDAPARAMETERTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_MISSINGMETHOD">
            <summary>
            Localization string with key EXCEPTION_BIND_MISSINGMETHOD
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOINVOKENONDELEG">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOINVOKENONDELEG
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_CLOSEDDELEGATETYPEISEXPECTED">
            <summary>
            Localization string with key EXCEPTION_BIND_CLOSEDDELEGATETYPEISEXPECTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_OPREQUIRESOPERAND">
            <summary>
            Localization string with key EXCEPTION_PARSER_OPREQUIRESOPERAND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETORESOLVENAME">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETORESOLVENAME
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_EXECUTION_EXPRESSIONGIVESNULLRESULT">
            <summary>
            Localization string with key EXCEPTION_EXECUTION_EXPRESSIONGIVESNULLRESULT
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BOUNDEXPR_CANTCONVERTARG">
            <summary>
            Localization string with key EXCEPTION_BOUNDEXPR_CANTCONVERTARG
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS">
            <summary>
            Localization string with key EXCEPTION_BOUNDEXPR_WRONGNUMPARAMS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE">
            <summary>
            Localization string with key EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEBUILDINGTREE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_BINARYOPREQOPERAND">
            <summary>
            Localization string with key EXCEPTION_PARSER_BINARYOPREQOPERAND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_UNKNOWNEXPRTYPE">
            <summary>
            Localization string with key EXCEPTION_COMPIL_UNKNOWNEXPRTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDCONSTRUCTOR">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDCONSTRUCTOR
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE">
            <summary>
            Localization string with key EXCEPTION_PARSER_INVALIDCHILDTYPESOFNODE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETORESOLVEMEMBERONTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETORESOLVEMEMBERONTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND">
            <summary>
            Localization string with key EXCEPTION_PARSER_OPREQUIRESSECONDOPERAND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_MISSINGATTRONNODE">
            <summary>
            Localization string with key EXCEPTION_BIND_MISSINGATTRONNODE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED">
            <summary>
            Localization string with key EXCEPTION_PARSER_UNEXPECTEDTOKENWHILEOTHEREXPECTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDDELEG">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDDELEG
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_NOBINARYOPONTYPE">
            <summary>
            Localization string with key EXCEPTION_COMPIL_NOBINARYOPONTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE">
            <summary>
            Localization string with key EXCEPTION_COMPIL_UNKNOWNBINARYEXPRTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_FAILEDTOBINDGENERICARGUMENTSTOTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_FAILEDTOBINDGENERICARGUMENTSTOTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_TOKENIZER_INVALIDCHARLITERAL">
            <summary>
            Localization string with key EXCEPTION_TOKENIZER_INVALIDCHARLITERAL
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_TYPENAMEEXPECTED">
            <summary>
            Localization string with key EXCEPTION_PARSER_TYPENAMEEXPECTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_RENDERFAILED">
            <summary>
            Localization string with key EXCEPTION_BIND_RENDERFAILED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETORESOLVETYPEMULTIPLE">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETORESOLVETYPEMULTIPLE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE">
            <summary>
            Localization string with key EXCEPTION_BOUNDEXPR_BODYRESULTDOESNTMATCHRESULTTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL">
            <summary>
            Localization string with key EXCEPTION_TOKENIZER_UNEXPECTEDSYMBOL
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE">
            <summary>
            Localization string with key EXCEPTION_PARSER_INVALIDCHILDCOUNTOFNODE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_ONLYFUNCLAMBDASISSUPPORTED">
            <summary>
            Localization string with key EXCEPTION_COMPIL_ONLYFUNCLAMBDASISSUPPORTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_UNBOUNDEXPR_INVALIDPARAMCOUNT">
            <summary>
            Localization string with key EXCEPTION_UNBOUNDEXPR_INVALIDPARAMCOUNT
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_UNEXPECTEDTOKEN">
            <summary>
            Localization string with key EXCEPTION_PARSER_UNEXPECTEDTOKEN
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE">
            <summary>
            Localization string with key EXCEPTION_COMPIL_UNKNOWNUNARYEXPRTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_NOCONVERTIONBETWEENTYPES">
            <summary>
            Localization string with key EXCEPTION_COMPIL_NOCONVERTIONBETWEENTYPES
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_RESTRICTED_MEMBER_INVOCATION">
            <summary>
            Localization string with key EXCEPTION_BIND_RESTRICTED_MEMBER_INVOCATION
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_LIST_LISTISEMPTY">
            <summary>
            Localization string with key EXCEPTION_LIST_LISTISEMPTY
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_CALLMEMBERISNOTMETHOD">
            <summary>
            Localization string with key EXCEPTION_BIND_CALLMEMBERISNOTMETHOD
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_FAILEDTOBINDMEMBERBINDINGS">
            <summary>
            Localization string with key EXCEPTION_BIND_FAILEDTOBINDMEMBERBINDINGS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDMETHOD">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDMETHOD
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME">
            <summary>
            Localization string with key EXCEPTION_UNBOUNDEXPR_DUPLICATEPARAMNAME
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_COLONISEXPRECTED">
            <summary>
            Localization string with key EXCEPTION_PARSER_COLONISEXPRECTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDCALL">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDCALL
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOCREATEEXPRWITHPARAMS">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOCREATEEXPRWITHPARAMS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNKNOWNEXPRTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_UNKNOWNEXPRTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_FAILEDTOBINDNEWEXPRESSION">
            <summary>
            Localization string with key EXCEPTION_BIND_FAILEDTOBINDNEWEXPRESSION
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_FAILEDTOBIND">
            <summary>
            Localization string with key EXCEPTION_BIND_FAILEDTOBIND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOBINDMEMBER">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOBINDMEMBER
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_MISSINGMETHODPARAMETER">
            <summary>
            Localization string with key EXCEPTION_BIND_MISSINGMETHODPARAMETER
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_MISSINGORWRONGARGUMENT">
            <summary>
            Localization string with key EXCEPTION_BIND_MISSINGORWRONGARGUMENT
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_MEMBERISNOTMETHOD">
            <summary>
            Localization string with key EXCEPTION_BIND_MEMBERISNOTMETHOD
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_UNEXPECTEDTOKENTYPE">
            <summary>
            Localization string with key EXCEPTION_PARSER_UNEXPECTEDTOKENTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_EXECUTION_CANTDONULLVALUE">
            <summary>
            Localization string with key EXCEPTION_EXECUTION_CANTDONULLVALUE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ">
            <summary>
            Localization string with key EXCEPTION_STRINGUTILS_UNEXPECTEDESCAPESEQ
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_MISSING_OPERATOR">
            <summary>
            Localization string with key EXCEPTION_PARSER_MISSING_OPERATOR
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_INVALIDLAMBDABODYTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_INVALIDLAMBDABODYTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_FAILEDTOBINDLISTINITIALIZERS">
            <summary>
            Localization string with key EXCEPTION_BIND_FAILEDTOBINDLISTINITIALIZERS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_INVALIDCHARLITERAL">
            <summary>
            Localization string with key EXCEPTION_BIND_INVALIDCHARLITERAL
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_EXPRESSIONISEMPTY">
            <summary>
            Localization string with key EXCEPTION_PARSER_EXPRESSIONISEMPTY
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLEREMAPPARAMETERSCOUNTMISMATCH">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLEREMAPPARAMETERSCOUNTMISMATCH
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETORESOLVETYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETORESOLVETYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES">
            <summary>
            Localization string with key EXCEPTION_UNBOUNDEXPR_TYPESDOESNTMATCHNAMES
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE">
            <summary>
            Localization string with key EXCEPTION_BOUNDEXPR_WRONGPARAMETERTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETOAPPLYNULLCONDITIONALOPERATORONTYPEREF">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETOAPPLYNULLCONDITIONALOPERATORONTYPEREF
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_UNARYOPREQOPERAND">
            <summary>
            Localization string with key EXCEPTION_PARSER_UNARYOPREQOPERAND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS">
            <summary>
            Localization string with key EXCEPTION_BOUNDEXPR_ARGSDOESNTMATCHPARAMS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_UNABLETORESOLVEMETHODONTYPE">
            <summary>
            Localization string with key EXCEPTION_BIND_UNABLETORESOLVEMETHODONTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_INVALIDLAMBDAARGUMENTS">
            <summary>
            Localization string with key EXCEPTION_BIND_INVALIDLAMBDAARGUMENTS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_PARSER_TERNARYOPREQOPERAND">
            <summary>
            Localization string with key EXCEPTION_PARSER_TERNARYOPREQOPERAND
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_COMPIL_NOUNARYOPONTYPE">
            <summary>
            Localization string with key EXCEPTION_COMPIL_NOUNARYOPONTYPE
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_INVALIDCONSTANTEXPRESSION">
            <summary>
            Localization string with key EXCEPTION_BIND_INVALIDCONSTANTEXPRESSION
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_BIND_TOOMANYARGUMENTS">
            <summary>
            Localization string with key EXCEPTION_BIND_TOOMANYARGUMENTS
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_EXECUTION_MULTIPARAMETERINDEXERNOTSUPPORTED">
            <summary>
            Localization string with key EXCEPTION_EXECUTION_MULTIPARAMETERINDEXERNOTSUPPORTED
            </summary>
        </member>
        <member name="P:GameDevWare.Dynamic.Expressions.Properties.Resources.EXCEPTION_EXECUTION_INVALIDMEMBERFOREXPRESSION">
            <summary>
            Localization string with key EXCEPTION_EXECUTION_INVALIDMEMBERFOREXPRESSION
            </summary>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionExtensions">
            <summary>
            Extension method for <see cref="T:System.Linq.Expressions.Expression`1"/> types.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Compiles specified expression into <see cref="T:System.Func`1"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Func`2"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Func`3"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Func`4"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <typeparam name="TArg3">Third argument type.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Func`5"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <typeparam name="TArg3">Third argument type.</typeparam>
            <typeparam name="TArg4">Fourth argument type.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot(System.Linq.Expressions.Expression{System.Action},System.Boolean)">
            <summary>
            Compiles specified expression into <see cref="T:System.Action"/> delegate using AOT aware expression compiler.
            </summary>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Action`1"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``2(System.Linq.Expressions.Expression{System.Action{``0,``1}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Action`2"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Action`3"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <typeparam name="TArg3">Third argument type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CompileAot``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}},System.Boolean)">
            <summary>
             Compiles specified expression into <see cref="T:System.Action`4"/> delegate using AOT aware expression compiler.
            </summary>
            <typeparam name="TArg1">First argument type.</typeparam>
            <typeparam name="TArg2">Second argument type.</typeparam>
            <typeparam name="TArg3">Third argument type.</typeparam>
            <typeparam name="TArg4">Fourth argument type.</typeparam>
            <param name="expression">An expression syntax tree. Not null.</param>
            <param name="forceAot">True to always use AOT compiler event if environment is JIT and supports dynamic code.</param>
            <returns>A compiled expression.</returns>
        </member>
    </members>
</doc>
